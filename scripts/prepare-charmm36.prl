#!/usr/bin/perl

#######################################################
#
# This scripts is part of a package that automatically
#  setups protein for CHARMM.
#
# This one prepares a CHARMM input file, given the 
#  results of the other scripts.
#
# Usage : ./prepare-charmm.prl
#
#
# For informations, please contact:
# ZOETE Vincent
# vincent.zoete@isb-sib.ch
# Swiss Institute of Bioinformatics
# Molecular Modeling Group
# Quartier Sorge - Batiment Genopode
# CH-1015 Lausanne
# Switzerland
# T: +41 21 692 4082
######################################################


$DIR="preparing-system";
#$SETUP_FOR_CHARMM_DIR="/home/mcuendet/src/setup-for-charmm/";
#$CHARMM_EXE="/softlib/exe/x86_64/pkg/charmm/36a2/intel9_64_mpich-1.2.7p1/bin/charmm";
#$CHARMM_EXE="/home/mac2109/local/charmm36a2_intel9_64_mpich-1.2.7p1/bin/charmm";
$CHARMM_EXE=$ENV{charmm};
#$CHARMM_TOPPAR="/home/mac2109/mmgbsa/mmgbsa2.1/mitch_top_files_mackerell/";
$CHARMM_TOPPAR=$ENV{top_path};

open(LOG,">$DIR/Preparation.log");


open(INPUT,">$DIR/setup.inp");



# Write CHARMM input file header

print INPUT "\* \n\n";

print INPUT "!------ Aliases \n";
print INPUT "SET lib  $CHARMM_TOPPAR \n\n";


print INPUT "!------ Topology and Parameters \n";
print INPUT "open unit 1 card read name \@lib/top_all36_prot.rtf \n";
print INPUT "read RTF card unit 1 \n";
print INPUT "close unit 1 \n\n";

print INPUT "open unit 1 card read name \@lib/top_all36_lipid.rtf\n";
print INPUT "read RTF card unit 1 append\n";
print INPUT "close unit 1\n\n";

print INPUT "open unit 1 card read name \@lib/top_all36_cgenff.rtf\n";
print INPUT "read RTF card unit 1 append\n";
print INPUT "close unit 1\n\n";

print INPUT "open unit 1 card read name \@lib/top_all36_carb.rtf\n";
print INPUT "read RTF card unit 1 append\n";
print INPUT "close unit 1\n\n";


#if (-e "$DIR/nad.pdb") {
#  system "cp $SETUP_FOR_CHARMM_DIR/nad.rtf $DIR";
#  print INPUT "open unit 1 card read name nad.rtf  \n";
#  print INPUT "read RTF card unit 1 append \n";
#  print INPUT "close unit 1 \n\n";
#}

#if (-e "$DIR/azi.pdb") {
#  system "cp $SETUP_FOR_CHARMM_DIR/azi.rtf $DIR";
#  print INPUT "open unit 1 card read name azi.rtf  \n";
#  print INPUT "read RTF card unit 1 append \n";
#  print INPUT "close unit 1 \n\n";
#}

if (-e "../setup/ligand/ligand.rtf") {
  system "cp ../setup/ligand/ligand.rtf $DIR";
  print INPUT "open unit 1 card read name ligand.rtf  \n";
  print INPUT "read RTF card unit 1 append \n";
  print INPUT "close unit 1 \n\n";
}


print INPUT "open unit 1 card read name \@lib/par_all36_prot.prm \n";
print INPUT "read PARA card flex unit 1 \n";
print INPUT "close unit 1 \n\n";

print INPUT "open unit 1 card read name \@lib/par_all36_lipid.prm \n";
print INPUT "read PARA card flex unit 1 append\n";
print INPUT "close unit 1 \n\n";

print INPUT "open unit 1 card read name \@lib/par_all36_cgenff.prm \n";
print INPUT "read PARA card flex unit 1 append\n";
print INPUT "close unit 1 \n\n";

print INPUT "open unit 1 card read name \@lib/par_all36_carb.prm \n";
print INPUT "read PARA card flex unit 1 append\n";
print INPUT "close unit 1 \n\n";


print INPUT "STREAM \@lib/toppar_all36_lipid_inositol.str\n";
#print INPUT "STREAM \@lib/saia.str \n";
#print INPUT "STREAM \@lib/sapi24_renamed_sapi.str \n";
print INPUT "STREAM \@lib/toppar_water_ions.str \n\n";


#print INPUT "open unit 1 card read name \@lib/par_all22_prot_swisssidechain.inp \n";
#print INPUT "read PARA card unit 1 append\n";
#print INPUT "close unit 1 \n\n";

#if (-e "$DIR/nad.pdb") {
#  system "cp $SETUP_FOR_CHARMM_DIR/nad.par $DIR";
#  print INPUT "open unit 1 card read name nad.par  \n";
#  print INPUT "read PARA card unit 1 append\n";
#  print INPUT "close unit 1 append \n\n";
#}

#if (-e "$DIR/azi.pdb") {
#  system "cp $SETUP_FOR_CHARMM_DIR/azi.par $DIR";
#  print INPUT "open unit 1 card read name azi.par  \n";
#  print INPUT "read PARA card unit 1 append\n";
#  print INPUT "close unit 1 append \n\n";
#}

#if (-e "$DIR/heme.pdb") {
#  system "cp $SETUP_FOR_CHARMM_DIR/heme.par $DIR";
#  print INPUT "open unit 1 card read name heme.par  \n";
#  print INPUT "read PARA card unit 1 append\n";
#  print INPUT "close unit 1 append \n\n";
#}

#$is_ASPH=`grep ASPH $DIR/ProteinAtoms`;
#$is_ASPH=1;
#if ($is_ASPH ne "") {
#  system "cp \@lib/asph.par $DIR";
#  print INPUT "open unit 1 card read name asph.par  \n";
#  print INPUT "read PARA card unit 1 append\n";
#  print INPUT "close unit 1 append \n\n"
#}

if (-e "../setup/ligand/ligand.par") {
  system "cp ../setup/ligand/ligand.par $DIR";
  print INPUT "open unit 1 card read name ligand.par  \n";
  print INPUT "read PARA card unit 1 append \n";
  print INPUT "close unit 1 \n\n";
}

#if (-e "$DIR/zn2.pdb" or -e "$DIR/heme.pdb") {
#  print INPUT "STREAM $SETUP_FOR_CHARMM_DIR/sulf.str \n\n";
#}


if (-e "$DIR/heme.pdb") {
  print INPUT "STREAM \@lib/stream/toppar_all22_prot_heme-vz.str \n\n";
}


# Check included segments. Calculate offsets.
$nseg=0;
$ires=1;

open(IN,"$DIR/ProteinSegments") or die "Could not open file $DIR/ProteinSegments\n";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $segment=$w[1];
  $included[$segment]=lc($w[15]);
  if ($included[$segment] eq "true") {
    $nseg++;
    $seg_num[$segment]=$nseg;
    $segid[$segment]=$seg_num[$segment]."S";
    $FIRST[$segment]=$w[19];
    $LAST[$segment]=$w[23];
    $offset[$segment]=$ires-$w[5];
    $ires+=$w[8]-$w[3]+1;
    $first_res[$segment]=$w[3];
    $last_res[$segment]=$w[8];
    $file_name="seg".$seg_num[$segment].".crd";
    $offset_ires[$segment+1]=$offset_ires[$segment];
    # Writes corresponding paragraph in CHARMM input file
    print INPUT "OPEN UNIT 1 READ CARD NAME $file_name \n";
    print INPUT "READ SEQUENCE COOR RESID UNIT 1 \n";
    print INPUT "REWIND UNIT 1 \n";
    print INPUT "GENE $segid[$segment] SETUP FIRST $FIRST[$segment] LAST $LAST[$segment] \n";
    print INPUT "READ COOR CARD RESID UNIT 1 \n";
    print INPUT "CLOSE UNIT 1 \n\n";
  } else {
    $offset_ires[$segment+1]=$offset_ires[$segment]-($w[8]-$w[3]+1);
  }
}
close(IN);


#open(IN,"$DIR/HeteroatomSegments") or die "Could not open file $DIR/HeteroatomSegments";
#foreach $line (<IN>) {
#  @w=split(" ",$line);
#  $segment=$w[1];
#  $included[$segment]=lc($w[19]);
#  $resname=$w[13];
#  if ($included[$segment] eq "true") {
#    $nseg++;
#    $seg_num[$segment]=$nseg;
#    if ($resname eq "LIG") {
#      $segid[$segment]=LIG;
#    } else {
#      $segid[$segment]=$seg_num[$segment]."S";
#    }
#    $FIRST[$segment]=$w[23];
#    $LAST[$segment]=$w[27];
#    $offset[$segment]=$ires-$w[5];
#    $ires+=$w[8]-$w[3]+1;
#    $file_name_crd="seg".$seg_num[$segment].".crd";
#    if ($w[13] eq "TIP3") { $nAnD = " NOANGLE NODIHEDRAL " } else { $nAnD = "" }
#    $offset_ires[$segment+1]=$offset_ires[$segment];
#    # Writes corresponding paragraph in CHARMM input file
#    print INPUT "OPEN UNIT 1 READ CARD NAME $file_name_crd \n";
#    print INPUT "READ SEQUENCE COOR RESID UNIT 1 \n";
#    print INPUT "REWIND UNIT 1 \n";
#    print INPUT "GENE $segid[$segment] SETUP FIRST $FIRST[$segment] LAST $LAST[$segment] $nAnD \n";
#    print INPUT "READ COOR CARD RESID UNIT 1 \n";
#    print INPUT "CLOSE UNIT 1 \n\n";
#  } else {
#    $offset_ires[$segment+1]=$offset_ires[$segment]-($w[8]-$w[3]+1);
#  }
#}
#close(IN);

$lastsegment=$segment;



# Get protonation states of histidines.
#open(IN,"$DIR/Histidine-protonation") or die "Could not open file $DIR/Histidine-protonation \n";
#foreach $line (<IN>) {
#  @w=split(" ",$line);
#  $ires=$w[1];
#  $HisPS[$ires]=$w[3];
#}


#################################################################
# Prepare coordinate files for proteins.
#################################################################

$current_segment=1;

$file_name="$DIR/seg1.pdb";
open(PDB,">$file_name");
($file_name_crd=$file_name) =~ s/.pdb/.crd/g;
open(CRD,">$file_name_crd");
print CRD "*\nTobechangedlater\n";
$segid="1S";
$nat=0;

open(IN,"$DIR/ProteinAtoms") or die "Could not open file $DIR/ProteinAtoms \n";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $segment=$w[6];


  if ($segment != $current_segment) {
    close(PDB);
    close(CRD);
    system "sed -e 's/Tobechangedlater/$nat/g' $file_name_crd > tmp ";
    system "mv -f tmp  $file_name_crd";
    $current_segment=$segment;
    if ($included[$segment] eq "true") {
      $nat=0;
      $file_name=$DIR."/seg".$seg_num[$segment].".pdb";
      open(PDB,">$file_name");
      ($file_name_crd=$file_name) =~ s/.pdb/.crd/g;
      open(CRD,">$file_name_crd");
      print CRD "*\nTobechangedlater\n";
    }
  }


  if ($included[$segment] eq "true") {

    $nat++;

    $atom_num=$w[2];
    $ires=$w[9];
    $resid=$w[12];
    $res_name=$w[15];
    $segid=$seg_num[$segment]."S";
    #if ($res_name =~ /HIS/) {
    #  $res_name=$HisPS[$ires];
    #}
    $atom_name=$w[18];

    ($name=$atom_name) =~ s/ //g;
    if ($ires == $last_res[$segment] and $name eq "O"    and $LAST[$segment] eq "CTER") {
      $atom_name="OT1";
    }
    if ($ires == $last_res[$segment] and $name eq "OXT"  and $LAST[$segment] eq "CTER") {
      $atom_name="OT2";
    }
    if ($ires == $last_res[$segment] and $name eq "OCT1" and $LAST[$segment] eq "CTER") {
      $atom_name="OT1";
    }
    if ($ires == $last_res[$segment] and $name eq "OCT2" and $LAST[$segment] eq "CTER") {
      $atom_name="OT2";
    }
    if ($ires == $last_res[$segment] and $name eq "O"    and $LAST[$segment] eq "CT1" ) {
      $atom_name="OT1";
    }
    if ($ires == $last_res[$segment] and $name eq "OXT"  and $LAST[$segment] eq "CT1" ) {
      $atom_name="OT2";
    }
    if ($ires == $last_res[$segment] and $name eq "O"    and $LAST[$segment] eq "CT2" ) {
      $atom_name="O";
    }
    if ($ires == $last_res[$segment] and $name eq "OXT"  and $LAST[$segment] eq "CT2" ) {
      $atom_name="NT";
    }
    if ($ires == $last_res[$segment] and $name eq "O"    and $LAST[$segment] eq "CT3" ) {
      $atom_name="O";
    }
    if ($ires == $last_res[$segment] and $name eq "OXT"  and $LAST[$segment] eq "CT3" ) {
      $atom_name="NT";
    }

    $x=$w[21];
    $y=$w[22];
    $z=$w[23];

    $w=1.00;

    printf PDB ("ATOM%7d %-5s%4s%5s    %8.3f%8.3f%8.3f  1.00%6.2f      %4s \n",
		$atom_num,$atom_name,$res_name,$resid,$x,$y,$z,$w,$segid);


    $nires=$ires+$offset_ires[$segment];
    printf CRD ("%5d%5d %-4s %-4s%10.5f%10.5f%10.5f %-4s %-5s%9.5f\n",
		$atom_num,$nires,$res_name,$atom_name,$x,$y,$z,
		$segid,$resid,$w);




    if ($res_name eq "CYS" and $atom_name eq "SG") {
      $is_Cysteine{$ires}=1;
      $cys_segid{$ires}=$segid;
      $cys_resid{$ires}=$resid;
      $x_sg[$ires]=$x;
      $y_sg[$ires]=$y;
      $z_sg[$ires]=$z;
    }

  }


}


# Put number of atoms in the last CRD file (not done in loop above)
system "sed -e 's/Tobechangedlater/$nat/g' $file_name_crd > tmp ";
system "mv -f tmp  $file_name_crd";


#  Patch for protonated aspartate of HIV-1 protease
#print INPUT "PATCH ASPP 1S 25 \n";
#print INPUT "AUTOgenerate ANGLes DIHEdrals \n\n";


# Patch for disulfide bridges
open(SSBOND,"$DIR/DisulfideBridges") or die "Could not open file $DIR/DisulfideBridges \n";
foreach $line (<SSBOND>) {
  @w=split(" ",$line);
  $seg1=$w[2];
  $resid1=$w[3];
  $seg2=$w[4];
  $resid2=$w[5];
  if ($included[$seg1] ne "true" and $included[$seg2] ne "true") {
    # Disuldide bridge not included. Nothing to do.
  }
  elsif ($included[$seg1] ne "true" or $included[$seg2] ne "true") {
    print LOG "WARNING: Disulfide bridge between residue $resid1 of chain $seg1 \n";
    print LOG "           and residue $resid2 of chain $seg2, which are not both included\n";
    print LOG "           in the system. \n";
  } else {
    print INPUT "PATCH DISU $seg_num[$seg1]S $resid1 $seg_num[$seg2]S $resid2 \n";
    $disulfide_bridge=1;
  }
}
print "\n";

if ($disulfide_bridge ==1 ){
  print INPUT "AUTOgenerate ANGLes DIHEdrals \n\n";
}




#################################################################
# Prepare coordinate files for Heteroatoms
#################################################################

#open(IN,"$DIR/HeteroatomAtoms") or die "Could not open file $DIR/HeteroatomAtoms \n";
#foreach $line (<IN>) {
#  @w=split(" ",$line);
#  $segment=$w[6];

#  if ($segment != $current_segment) {
#    close(PDB);
#    close(CRD);
#    if ($res_name =~ /TIP3/) {
#      $nat3=3*$nat;
#      system "sed -e 's/Tobechangedlater/$nat3/g' $file_name_crd > tmp ";
#    } else {
#      system "sed -e 's/Tobechangedlater/$nat/g' $file_name_crd > tmp ";
#    }

#    system "mv -f tmp  $file_name_crd";
#    $current_segment=$segment;
#    if ($included[$segment] eq "true") {
#      $nat=0;
#      $file_name=$DIR."/seg".$seg_num[$segment].".pdb";
#      open(PDB,">$file_name");
#      ($file_name_crd=$file_name) =~ s/.pdb/.crd/g;
#      open(CRD,">$file_name_crd");
#      print CRD "*\nTobechangedlater\n";
#    }
#  }#########
#
#  if ($included[$segment] eq "true") {
#
#    $nat++;

#    $atom_num=$w[2];
#    $ires=$w[9];
#    $resid=$w[12];
#    $atom_name=$w[18];#

#    $res_name=$w[15];
#    if ($res_name eq "LIG") {
#      $segid="LIG";
#      $is_there_a_ligand=1;
#    } else {
#      $segid=$seg_num[$segment]."S";
#    }

#    $x=$w[21];
#    $y=$w[22];
#    $z=$w[23];

#    $w=1.00;
#
#    printf PDB ("ATOM%7d %-5s%4s%5s    %8.3f%8.3f%8.3f  1.00%6.2f      %4s \n",
#		$atom_num,$atom_name,$res_name,$resid,$x,$y,$z,$w,$segid);

#    $nires=$ires+$offset_ires[$segment];
#    printf CRD ("%5d%5d %-4s %-4s%10.5f%10.5f%10.5f %-4s %-5s%9.5f\n",
#		$atom_num,$nires,$res_name,$atom_name,$x,$y,$z,
#		$segid,$resid,$w);

#    if ($res_name =~ /TIP3/) {
#      printf CRD ("%5d%5d %-4s %-4s%10.5f%10.5f%10.5f %-4s %-5s%9.5f\n",
#		  $atom_num,$nires,$res_name,"H1",$x+0.1,$y,$z,
#		  $segid,$resid,$w);
#      printf CRD ("%5d%5d %-4s %-4s%10.5f%10.5f%10.5f %-4s %-5s%9.5f\n",
#		  $atom_num,$nires,$res_name,"H2",$x-0.1,$y,$z,
#		  $segid,$resid,$w);
#    }



#    # Check whether to make a thiolate cysteine (proximity of Zn);
#    if ($atom_name eq "ZN") {
#      foreach $SG (keys %is_Cysteine) {
#	$dist= ($x-$x_sg[$SG])**2 + ($y-$y_sg[$SG])**2 + ($z-$z_sg[$SG])**2;
#	if ($dist < 9) {
#	  $should_be_thiolate{$SG}=1;
#	}
#      }
#    }

#  }

#
#}


# Put number of atoms in the last CRD file (not done in loop above)
if ($res_name =~ /TIP3/) {
  $nat3=3*$nat;
  system "sed -e 's/Tobechangedlater/$nat3/g' $file_name_crd > tmp ";
} else {
  system "sed -e 's/Tobechangedlater/$nat/g' $file_name_crd > tmp ";
}
system "mv -f tmp  $file_name_crd";



#################################################################
# Continue CHARMM input file
#################################################################



# Patch for Cysteine thiolate / Zn
foreach $CYS (keys %should_be_thiolate) {
  print INPUT "PATCH THIO $cys_segid{$CYS}  $cys_resid{$CYS}  \n";
  $thiolate_cysteine=1
}


# Search and add covalent bonds between protein residues and HEME

if (-e "$DIR/heme.pdb") {

  $natom=0;
  $nf=0;

  open(IN,"$DIR/ProteinAtoms") or die "Could not open file $DIR/ProteinAtoms \n";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $natom++;
    $segment[$natom]=$w[6];
    $res_name[$natom]=$w[15];
    $atom_name[$natom]=$w[18];
    $resid[$natom]=$w[12];
    $x[$natom]=$w[21];
    $y[$natom]=$w[22];
    $z[$natom]=$w[23];
  }
  close(IN);

  open(IN,"$DIR/HeteroatomAtoms") or die "Could not open file $DIR/HeteroatomAtoms \n";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $natom++;
    $segment[$natom]=$w[6];
    $atom_name[$natom]=$w[18];
    $res_name[$natom]=$w[15];
    $resid[$natom]=$w[12];
    $x[$natom]=$w[21];
    $y[$natom]=$w[22];
    $z[$natom]=$w[23];
    if ($atom_name[$natom] eq "FE") {
      $nfe++;
      $nat_fe[$nfe]=$natom;
      $seg_fe[$nfe]=$w[6];
      $resid_fe[$nfe]=$w[12];
      $x_fe[$nfe]=$w[21];
      $y_fe[$nfe]=$w[22];
      $z_fe[$nfe]=$w[23];
    }
  }
  close(IN);


  for $f (1..$nfe) {
    for $i (1..$natom) {
      if ($i != $nat_fe[$f]) {
	$d =($x[$i]-$x_fe[$f])**2;
	$d+=($y[$i]-$y_fe[$f])**2;
	$d+=($z[$i]-$z_fe[$f])**2;
	if ($d < 6) {
	  if ($included[$segment[$i]] ne "true") {
	    print LOG "WARNING: Link between $resid_fe[$f] FE of chain $seg_fe[$f] ";
	    print LOG "and $res_name[$i] $resid[$i] $atom_name[$i] of chain $segment[$i], \n";
	    print LOG "           which are not both included in the system.\n";
	  } elsif ($res_name[$i] eq "HIS" and $atom_name[$i] eq "NE2" and dontdo==0) {
	    print INPUT "PATCH PHEM  $segid[$segment[$i]] $resid[$i]  $segid[$seg_fe[$f]] $resid_fe[$f] \n";
	  } elsif ($res_name[$i] eq "TIP3") {
	    print INPUT "PATCH PLTP  $segid[$segment[$i]] $resid[$i]  $segid[$seg_fe[$f]] $resid_fe[$f] \n";
	  } elsif ($res_name[$i] eq "CYS") {
	    print INPUT "PATCH THIO $segid[$segment[$i]] $resid[$i] \n";
	    print INPUT "PATCH PCYS $segid[$segment[$i]] $resid[$i]  $segid[$seg_fe[$f]] $resid_fe[$f] \n";
	  } else {
	    print LOG "WARNING: Link between $segid[$seg_fe[$f]] $resid_fe[$f] FE ";
	    print LOG "           and $segid[$segment[$i]] $res_name[$i] $resid[$i] $atom_name[$i] ";
	    print LOG "           does not correspond to a known patch.\n";
	  }

	}
      }
    }
  }

}




# Finish CHARMM input file

print INPUT "\n";
print INPUT "IC FILL \n";
print INPUT "IC PARA ALL \n";
#print INPUT "IC BUILD \n\n";

# Rebuild all hydrogens ?
#print INPUT "HBUILD SELE TYPE H* END \n";
#print INPUT "HBUILD SELE TYPE H* END \n\n";
# Or build only missing hydrogens
print INPUT "HBUILD \n\n";

#if (-e "$DIR/heme.pdb") {
#  print INPUT "DELETE ATOM SELE (RESNAME TIP3) .AND. .NOT. ( .BYRES. ( (TYPE FE .AROUND. 3) .AND. TYPE OH2 ) ) END\n\n";
#}


print INPUT "OPEN UNIT 1 WRITE CARD NAME ../data/complex.psf \n";
print INPUT "WRITE PSF CARD UNIT 1 \n";
print INPUT "CLOSE UNIT 1 \n\n";

print INPUT "OPEN UNIT 1 WRITE CARD NAME ../data/complex.crd \n";
print INPUT "WRITE COOR CARD UNIT 1 \n";
print INPUT "CLOSE UNIT 1 \n\n";

print INPUT "OPEN UNIT 1 WRITE CARD NAME ../data/complex.pdb \n";
print INPUT "WRITE COOR PDB UNIT 1 \n";
print INPUT "CLOSE UNIT 1 \n\n\n";



print INPUT "! ------------------------------ \n";
print INPUT "! -----        END         ----- \n";
print INPUT "! ------------------------------ \n\n";
print INPUT "STOP \n";

close(INPUT);

# Running CHARMM

chdir "$DIR";

print "\n\nRunning CHARMM. Might take a lot of time, please wait.\n\n";

system "$CHARMM_EXE < setup.inp > setup.out";

$ok=`grep "NORMAL TERMINATION BY NORMAL STOP" setup.out`;

chdir "..";

if ($ok ne "") {
  print $ok;
  print "Everything seems Ok \n";
} else {
  print "Error during setup. \n";
}

