#!/usr/bin/perl

#########################################################
#
# Written by Vincent Zoete
#
# Modified by Michel A. Cuendet 
#
# For questions, please contact vincent.zoete@unil.ch
# or michel.cuendet@unil.ch
#
#########################################################

# Effective sample size in a correlated time series
# Estimated from AR(1) process. 
# According to :
# Zwiers and Storch, Taking Serial Correlation into Account in Tests of the Mean
# Journal of Climate 8 : 336 (1995).

# prevent warnings for "smartmatch", i.e. operator "~~".
# use experimental qw(smartmatch switch);


$natom=`grep \"NATOM \" data/system.dat | awk '{print \$2}'`;   # Number of atoms in the system
chomp $natom;
print "Total number of atoms in the system : $natom \n";

$nconf=`grep nframes data/definitions.str | awk '(\$1=="SET"){print \$3}'`; # number of conformations (frames)
chomp $nconf;
print "Number of conformations : $nconf \n";

$nres=`grep lastresb data/definitions.str | awk '(\$1=="SET"){print \$3}'`; # Total number of residues.
chomp $nres;
print "Total number of residues : $nres \n";

$temp = `awk '(\$1=="!Ares")'  data/definitions.str `;
chomp $temp;
my @resA = split(/ /,$temp );
shift @resA;  # Getting rid of the line label in definitions.str
$nresA = scalar(@resA);

$temp = `awk '(\$1=="!Bres") '  data/definitions.str `;
chomp $temp;
my @resB = split(/ /,$temp );
shift @resB;  # Getting rid of the line label in definitions.str
$nresB = scalar(@resB);

my @resAB = @resA;
push( @resAB, @resB) ; 
$nresAB = $nresA + $nresB;



open(IN,"data/charges.crd");
foreach $line (<IN>) {
  # Look only at C alphas, P for lipids, O3 for cholesterol, Na for sodium ions...
  if ( ($line =~ /CA /) or ($line =~ / O3 /) or ($line =~ / P /) or ($line =~ / SOD /) ) {
    @w=split(" " ,$line);
    $name[$w[1]]=$w[7]." ".$w[2].$w[8];
  }
}

#===================================================================================
#Inter

print "Loading inter ... \n";

for $n (1..$nconf) {
  $nrA=0;
  open(IN,"inter/inter-byres-$n-a.dat") or die "Could not open file inter-byres-$n-b.dat \n";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $res_vdw_bb[$w[0]][$n]=$w[1];
    $res_elec_bb[$w[0]][$n]=$w[2];
    $res_vdw_sc[$w[0]][$n]=$w[3];
    $res_elec_sc[$w[0]][$n]=$w[4];
    $nrA+=1;
  }
  close(IN);
  $nrB=0;
  open(IN,"inter/inter-byres-$n-b.dat") or die "Could not open file inter-byres-$n-b.dat \n";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $res_vdw_bb[$w[0]][$n]+=$w[1];
    $res_elec_bb[$w[0]][$n]+=$w[2];
    $res_vdw_sc[$w[0]][$n]+=$w[3];
    $res_elec_sc[$w[0]][$n]+=$w[4];
    $nrB+=1;
  }

  if ( $nrA != $nresA ) { die "Frame $n : number of inter values in part A ($nrA) does not match definitions.str ($nresA) !!" ;}
  if ( $nrB != $nresB ) { die "Frame $n : number of inter values in part B ($nrB) does not match definitions.str ($nresB) !!" ;}

  close(IN);

}

#print "$res_elec_bb[81][1] $res_elec_sc[81][1]\n";

#===================================================================================
#Solv
print "Loading solv ... \n";

# Do in A :       
@res_bb_mean=0; @res_sc_mean=0; @res_all_mean=0;
for $f (1..$nconf) {
  open(IN,"solv-a/solv-a-frame-$f.dat") or die "Could not open file solv-a/solv-a-frame-$f.dat";
  foreach $line (<IN>) {
    if ($line !~/TOT/) {
      @w=split(" ",$line);
      $solv_a_bb[$w[0]][$f]=$w[1];
      $solv_a_sc[$w[0]][$f]=$w[2];
      $solv_a_all[$w[0]][$f]=$w[3];
    }
  }
}

# Do in B :    
@res_bb_mean=0; @res_sc_mean=0; @res_all_mean=0;
for $f (1..$nconf) {
  open(IN,"solv-b/solv-b-frame-$f.dat") or die "Could not open file solv-b/solv-b-frame-$f.dat";
  foreach $line (<IN>) {
    if ($line !~/TOT/) {
      @w=split(" ",$line);
      $solv_b_bb[$w[0]][$f]=$w[1];
      $solv_b_sc[$w[0]][$f]=$w[2];
      $solv_b_all[$w[0]][$f]=$w[3];
    }
  }
}

#Do in complex :   
@res_bb_mean=0; @res_sc_mean=0; @res_all_mean=0;
for $f (1..$nconf) {
  open(IN,"solv-comp/solv-comp-frame-$f.dat") or die "Could not open file solv-comp/solv-comp-frame-$f.dat";
  foreach $line (<IN>) {
    if ($line !~/TOT/) {
      @w=split(" ",$line);
      $solv_comp_bb[$w[0]][$f]=$w[1];
      $solv_comp_sc[$w[0]][$f]=$w[2];
      $solv_comp_all[$w[0]][$f]=$w[3];
    }
  }
}

#$temp = $solv_comp_all[81][1]- $solv_a_all[81][1] - $solv_b_all[81][1];
#print "$solv_comp_all[81][1] $solv_a_all[81][1]  $solv_b_all[81][1]  $temp \n";

#===================================================================================
# Surf 
# Here we need to sum over atoms to get residue (sc /bb) contributions.

print "Loading surf ... \n";
# Do sas in A :   
foreach $i (@resA)  {
  $filename="sas-a/sas-a-res-$i.dat";
  open(IN,$filename) or die "Could not open file $filename";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $sas_a_bb[$i][$w[0]] =$w[1];
    $sas_a_sc[$i][$w[0]] =$w[2];
    $sas_a_all[$i][$w[0]] =$w[3];
  }
}
#print "sas-a $sas_a_bb[81][1] $sas_a_sc[81][1] $sas_a_all[81][1] \n";


# Do sas in B :  
foreach $i (@resB)  {
  $filename="sas-b/sas-b-res-$i.dat";
  open(IN,$filename) or die "Could not open file $filename";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $sas_b_bb[$i][$w[0]] =$w[1];
    $sas_b_sc[$i][$w[0]] =$w[2];
    $sas_b_all[$i][$w[0]] =$w[3];
  }
}
#print "sas-b $sas_b_bb[81][1] $sas_b_sc[81][1] $sas_b_all[81][1] \n";


# Do sas in complex :  
foreach $i (@resAB)  {
  $filename="sas-comp/sas-comp-res-$i.dat";
  open(IN,$filename) or die "Could not open file $filename";
  foreach $line (<IN>) {
    @w=split(" ",$line);
    $sas_comp_bb[$i][$w[0]] =$w[1];
    $sas_comp_sc[$i][$w[0]] =$w[2];
    $sas_comp_all[$i][$w[0]] =$w[3];
  }
}
#print "sas-comp $sas_comp_bb[81][1] $sas_comp_sc[81][1] $sas_comp_all[81][1] \n";



# ====================================================================================================
# Calculate time series for entire dg
print "Calculating ... \n";

mkdir "dg";

foreach $i (@resAB)  {
  $filename="dg/dg-res-$i.dat";
  open(OUT,">$filename");
  # print "   residue $i ... \n";

  # debug :
  #my $vdw_sc_tot=0;
  #my $vdw_bb_tot=0;
  #my $vdw_all_tot=0;
  #my $elec_sc_tot=0;
  #my $elec_bb_tot=0;
  #my $elec_all_tot=0;
  #my $solv_sc_tot=0;
  #my $solv_bb_tot=0;
  #my $solv_all_tot=0;
  #my $np_sc_tot=0;
  #my $np_bb_tot=0;
  #my $np_all_tot=0;
  
  my $dg_sc_tot=0;
  my $dg_bb_tot=0;
  my $dg_all_tot=0;
  my $dg2_sc_tot=0;
  my $dg2_bb_tot=0;
  my $dg2_all_tot=0;
  
  my @dg_sc=0;
  my @dg_bb=0;
  my @dg_all=0;
  for $n (1..$nconf) {

    $vdw_sc = 0.5*$res_vdw_sc[$i][$n];
    $elec_sc = 0.5*$res_elec_sc[$i][$n];
    $solv_sc = $solv_comp_sc[$i][$n] - $solv_a_sc[$i][$n] - $solv_b_sc[$i][$n];
    $np_sc =  0.0072*($sas_comp_sc[$i][$n] - $sas_a_sc[$i][$n] -$sas_b_sc[$i][$n]) ;
    $dg_sc[$n] = $vdw_sc + $elec_sc + $solv_sc  + $np_sc ;

    $vdw_bb = 0.5*$res_vdw_bb[$i][$n];
    $elec_bb = 0.5*$res_elec_bb[$i][$n];
    $solv_bb = $solv_comp_bb[$i][$n] - $solv_a_bb[$i][$n] - $solv_b_bb[$i][$n];
    $np_bb =  0.0072*($sas_comp_bb[$i][$n] - $sas_a_bb[$i][$n] -$sas_b_bb[$i][$n]) ;
    $dg_bb[$n] = $vdw_bb + $elec_bb + $solv_bb  + $np_bb ;

    $vdw_all = $vdw_sc + $vdw_bb ;
    $elec_all = $elec_sc + $elec_bb ;
    $solv_all = $solv_comp_all[$i][$n] - $solv_a_all[$i][$n] - $solv_b_all[$i][$n];
    $np_all =  0.0072*($sas_comp_all[$i][$n] - $sas_a_all[$i][$n] -$sas_b_all[$i][$n]) ;
    $dg_all[$n] = $vdw_all + $elec_all + $solv_all  + $np_all ;
    
    # debug :
    #if ( ($i==81) and ($n==1)) {
    #    print "step 1:\n";
    #	print "bb  $dg_bb = $vdw_bb + $elec_bb + $solv_bb  + $np_bb \n";
    #	print "sc  $dg_sc = $vdw_sc + $elec_sc + $solv_sc  + $np_sc \n";
    #	print "all  $dg_all = $vdw_all + $elec_all + $solv_all  + $np_all \n";
    #}

    #$vdw_sc_tot+=$vdw_sc;
    #$vdw_bb_tot+=$vdw_bb;
    #$vdw_all_tot+=$vdw_all;
    #$elec_sc_tot+=$elec_sc; 
    #$elec_bb_tot+=$elec_bb; 
    #$elec_all_tot+=$elec_all; 
    #$solv_sc_tot+=$solv_sc;
    #$solv_bb_tot+=$solv_bb;
    #$solv_all_tot+=$solv_all;
    #$np_sc_tot+=$np_sc;
    #$np_bb_tot+=$np_bb;
    #$np_all_tot+=$np_all;

    $dg_sc_tot+=$dg_sc[$n];
    $dg_bb_tot+=$dg_bb[$n];
    $dg_all_tot+=$dg_all[$n];
    $dg2_sc_tot+=$dg_sc[$n]**2;
    $dg2_bb_tot+=$dg_bb[$n]**2;
    $dg2_all_tot+=$dg_all[$n]**2;

    printf OUT ("%4d    %10.4f %10.4f %10.4f \n",
                $n, $dg_bb[$n], $dg_sc[$n], $dg_all[$n]);
  }
 
  $dg_sc_mean[$i] = $dg_sc_tot/$nconf;
  $dg_bb_mean[$i] = $dg_bb_tot/$nconf;
  $dg_all_mean[$i] = $dg_all_tot/$nconf;

  # debug
  #$vdw_sc_mean[$i] =  $vdw_sc_tot/$nconf;
  #$elec_sc_mean[$i] =  $elec_sc_tot/$nconf;
  #$solv_sc_mean[$i] =  $solv_sc_tot/$nconf;
  #$np_sc_mean[$i] =  $np_sc_tot/$nconf;
 
  #if ($i == 81) {
  #  printf("%f   %f   %f\n",$vdw_sc_tot, $vdw_sc_tot/$nconf, $vdw_sc_mean[$i]);
  #  print "final for 81 sc : wdv elec solv np\n"; 
  #  print "$dg_sc_mean[$i] = + $vdw_sc_mean[$i] + $elec_sc_mean[$i] + $solv_sc_mean[$i]  + $np_sc_mean[$i] \n"; 
  #}

  # Unbiased standard deviation estimate 
  $dg_sc_sd[$i] = sqrt( ( $dg2_sc_tot - $nconf*$dg_sc_mean[$i]**2 ) / ($nconf -1) );
  $dg_bb_sd[$i] = sqrt( ( $dg2_bb_tot - $nconf*$dg_bb_mean[$i]**2 ) / ($nconf -1) );
  $dg_all_sd[$i] = sqrt( ( $dg2_all_tot - $nconf*$dg_all_mean[$i]**2 ) / ($nconf -1) );

  # Effective sample size in an AR(1)  correlated time series according to :
  # Zwiers and Storch, Taking Serial Correlation into Account in Tests of the Mean, Journal of Climate 8 : 336 (1995).

  # Now that we have the mean, we can calculate the moments :
  my $dg2_sc_norm_tot=0;
  my $dg2_bb_norm_tot=0;
  my $dg2_all_norm_tot=0;
  my $dg2_shift_sc_tot=0;
  my $dg2_shift_bb_tot=0;
  my $dg2_shift_all_tot=0;
  for $n (1..$nconf) {
    $dg2_sc_norm_tot+=($dg_sc[$n] -  $dg_sc_mean[$i])**2; 
    $dg2_bb_norm_tot+=($dg_bb[$n] -  $dg_bb_mean[$i])**2;
    $dg2_all_norm_tot+=($dg_all[$n] -  $dg_all_mean[$i])**2;
 
    if ($n >1) {
       $dg2_shift_sc_tot+=($dg_sc[$n] -  $dg_sc_mean[$i]) * ($dg_sc_old -  $dg_sc_mean[$i]);
       $dg2_shift_bb_tot+=($dg_bb[$n] -  $dg_bb_mean[$i]) * ($dg_bb_old -  $dg_bb_mean[$i]);
       $dg2_shift_all_tot+=($dg_all[$n] -  $dg_all_mean[$i]) * ($dg_all_old -  $dg_all_mean[$i]);
    }

    $dg_sc_old=$dg_sc[$n];
    $dg_bb_old=$dg_bb[$n];
    $dg_all_old=$dg_all[$n];
  }

# For each, calculate n_effective and standard error.
  if ($dg2_sc_tot > 0) {
    $r1_sc = $dg2_shift_sc_tot / $dg2_sc_norm_tot;
    $n_eff_sc[$i] = $nconf * (1-$r1_sc) / (1+$r1_sc) ;
    if ( $n_eff_sc[$i] > $nconf) {$n_eff_sc[$i] = $nconf};
    $dg_sc_err[$i] = $dg_sc_sd[$i] / sqrt($n_eff_sc[$i] ) ; 
  }else{
    $n_eff_sc[$i] = 0;
    $dg_sc_err[$i] = 0;
  }

  if ($dg2_bb_tot > 0) {
    $r1_bb = $dg2_shift_bb_tot / $dg2_bb_norm_tot;
    $n_eff_bb[$i] = $nconf * (1-$r1_bb) / (1+$r1_bb) ;
    if ( $n_eff_bb[$i] > $nconf) {$n_eff_bb[$i] = $nconf};
    $dg_bb_err[$i] = $dg_bb_sd[$i] / sqrt($n_eff_bb[$i] ) ;
  }else{
    $n_eff_bb[$i] = 0;
    $dg_bb_err[$i] = 0;
  }

  if ($dg2_all_tot > 0) {
    $r1_all = $dg2_shift_all_tot / $dg2_all_norm_tot;
    $n_eff_all[$i] = $nconf * (1-$r1_all) / (1+$r1_all) ;
    if ( $n_eff_all[$i] > $nconf) {$n_eff_all[$i] = $nconf};
    $dg_all_err[$i] = $dg_all_sd[$i] / sqrt($n_eff_all[$i] ) ;
  }else{
    $n_eff_all[$i] = 0;
    $dg_all_err[$i] = 0;
  }

  printf OUT "# --------------------------------------------\n";
  printf OUT ("# TOT     %10.4f %10.4f %10.4f \n",
              $dg_bb_mean[$i], $dg_sc_mean[$i], $dg_all_mean[$i]);
  printf OUT ("# SD      %10.4f %10.4f %10.4f \n",
              $dg_bb_sd[$i], $dg_sc_sd[$i], $dg_all_sd[$i]);
  printf OUT ("# N_eff   %10.4f %10.4f %10.4f \n",
              $n_eff_bb[$i], $n_eff_sc[$i], $n_eff_all[$i]);
  printf OUT ("# ERR     %10.4f %10.4f %10.4f \n",
              $dg_bb_err[$i], $dg_sc_err[$i], $dg_all_err[$i]);
  close(OUT);
}

# ====================================================================================================
# Print final output

open(OUTBB,">binding_bb_stat.dat");
open(OUTSC,">binding_sc_stat.dat");
open(OUTALL,">binding_all_stat.dat");

printf OUTBB ("#%-12s  %7s    %7s    %7s    %7s \n", "name", "dG", "sd", "n_eff", "err");
printf OUTSC ("#%-12s  %7s    %7s    %7s    %7s \n", "name", "dG", "sd", "n_eff", "err");
printf OUTALL ("#%-12s  %7s    %7s    %7s    %7s \n", "name", "dG", "sd", "n_eff", "err");

foreach $i (@resAB)  {

  printf OUTBB (" %-12s  %7.2f    %7.2f    %7d    %7.2f  \n", 
	 $name[$i], $dg_bb_mean[$i], $dg_bb_sd[$i], $n_eff_bb[$i], $dg_bb_err[$i] );

  printf OUTSC (" %-12s  %7.3f    %7.3f    %7d    %7.3f   \n", 
	 $name[$i], $dg_sc_mean[$i], $dg_sc_sd[$i], $n_eff_sc[$i], $dg_sc_err[$i] );

  printf OUTALL (" %-12s  %7.2f    %7.2f    %7d    %7.2f   \n", 
	 $name[$i], $dg_all_mean[$i], $dg_all_sd[$i], $n_eff_all[$i], $dg_all_err[$i] );

}

close(OUTBB);
close(OUTSC);
close(OUTALL);

