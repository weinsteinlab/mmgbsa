#!/usr/bin/perl

#########################################################
#
# Written by Vincent Zoete
#
# Modified by Michel A. Cuendet 
#
# For questions, please contact vincent.zoete@unil.ch
# or michel.cuendet@unil.ch
#
#########################################################

use warnings;

$mmgbsa_path = $ENV{'mmgbsa_path'};
require "$mmgbsa_path/perl_scripts/time_statistics.prl";

$nconf=`grep nframes data/definitions.str | awk '{print \$3}'`; # number of conformations (frames)
chomp $nconf;
print "Number of conformations : $nconf \n";

# --------------------------------------------------------------------
# Read suff in

open(IN,"total/inter-global.dat") or die "Could not open total/inter-global.dat";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $vdw[$w[0]]=$w[1];
  $elec[$w[0]]=$w[2];
}
close(IN);

open(IN,"total/solv-comp-global.dat") or die "Could not open total/solv-comp-global.dat";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $solv_comp[$w[0]]=$w[1];
}
close(IN);


open(IN,"total/solv-a-global.dat") or die "Could not open total/solv-a-global.dat";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $solv_a[$w[0]]=$w[1];
}
close(IN);

open(IN,"total/solv-b-global.dat") or die "Could not open total/solv-b-global.dat";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $solv_b[$w[0]]=$w[1];
}
close(IN);

open(IN,"total/buried-sasa.dat") or die "Could not open total/buried-sasa.dat";
foreach $line (<IN>) {
  @w=split(" ",$line);
  $surf[$w[0]]=$w[5];
}
close(IN);


# --------------------------------------------------------------------
# Print time series

open(OUT, ">binding-time.dat");

printf OUT ("       %8s  %8s  %8s  %8s  :   %8s \n","VdW","Elec","GB","SA", "TOTAL");
print OUT "---------------------------------------------------------\n";

for $i (1..$nconf) {

  $desolv[$i]=$solv_comp[$i]-($solv_a[$i]+$solv_b[$i]);
  $np[$i]=-0.0072*$surf[$i];
  # The minus sign comes from the fact that the buried surface is calculated 
  # as (a + b -comp) (to get a positive number)
  $bind[$i] = $vdw[$i] + $elec[$i] + $desolv[$i] + $np[$i];

  printf OUT ("%3d :  %8.2f  %8.2f  %8.2f  %8.2f  :   %8.2f \n",
	      $i, $vdw[$i], $elec[$i], $desolv[$i], $np[$i], $bind[$i]);
}



# --------------------------------------------------------------------
#  Calculate time statistics

($vdw_mean, $vdw_sd, $vdw_n_eff, $vdw_err) = time_statistics_FTZ(@vdw);
($elec_mean, $elec_sd, $elec_n_eff, $elec_err) = time_statistics_FTZ(@elec);
($desolv_mean, $desolv_sd, $desolv_n_eff, $desolv_err) = time_statistics_FTZ(@desolv);
($np_mean, $np_sd, $np_n_eff, $np_err) = time_statistics_FTZ(@np);
($bind_mean, $bind_sd, $bind_n_eff, $bind_err) = time_statistics_FTZ(@bind);



print OUT "---------------------------------------------------------\n";
printf OUT ("AVE :  %8.2f  %8.2f  %8.2f  %8.2f  :   %8.2f \n",
              $vdw_mean, $elec_mean, $desolv_mean, $np_mean, $bind_mean);
printf OUT ("SD  :  %8.2f  %8.2f  %8.2f  %8.2f  :   %8.2f \n",
              $vdw_sd, $elec_sd, $desolv_sd, $np_sd, $bind_sd);
printf OUT ("N_EF:  %8.2f  %8.2f  %8.2f  %8.2f  :   %8.2f \n",
              $vdw_n_eff, $elec_n_eff, $desolv_n_eff, $np_n_eff, $bind_n_eff);
printf OUT ("ERR :  %8.2f  %8.2f  %8.2f  %8.2f  :   %8.2f \n",
              $vdw_err, $elec_err, $desolv_err, $np_err, $bind_err);

close(OUT);

